{"ast":null,"code":"var _jsxFileName = \"/Users/igor_zhuk_2001/Downloads/bigcareerfest2021/client/src/components/tools/google/analytics/Wrapper.js\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n/* Import the GA unit and tracking ID */\n\nimport * as ReactGA from 'react-ga';\nimport { trackingID } from \"../../../../configs/google/analytics/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass GoogleAnalytics extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onChangePage = (pathname, search = '') => {\n      const pageUrl = pathname + search;\n      /* Extract location object from window */\n\n      const {\n        location\n      } = window;\n      /* Set current page for google analytics tracking */\n\n      ReactGA.set({\n        page: pageUrl,\n        location: `${location.origin}${pageUrl}`,\n        ...this.props.options\n      });\n      /* Mark page as viewed */\n\n      ReactGA.pageview(pageUrl);\n    };\n  }\n\n  componentDidMount() {\n    this.onChangePage(this.props.location.pathname, this.props.location.search);\n  }\n\n  componentDidUpdate({\n    location: prevLocation\n  }) {\n    const {\n      location: {\n        pathname,\n        search\n      }\n    } = this.props;\n    /* Extract the booleans, which tell if something was changed */\n\n    const isDifferentPathname = pathname !== prevLocation.pathname;\n    const isDifferentSearch = search !== prevLocation.search;\n    /* If any changes were tracked in url */\n\n    if (isDifferentPathname || isDifferentSearch) this.onChangePage(pathname, search);\n  }\n\n  render() {\n    return null;\n  }\n\n}\n\nGoogleAnalytics.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string,\n    search: PropTypes.string\n  }).isRequired,\n  options: PropTypes.object\n};\n\nconst RouteTracker = () => /*#__PURE__*/_jsxDEV(Route, {\n  component: GoogleAnalytics\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 60,\n  columnNumber: 5\n}, this); // const init = (options = {}) => {\n//     const env = window._env_ || {};\n//     const isGAEnabled = !!env.REACT_APP_GA_TRACKING_ID;\n//\n//     if (isGAEnabled) {\n//         ReactGA.initialize(\n//             env.REACT_APP_GA_TRACKING_ID, {\n//                 debug: env.REACT_APP_GA_DEBUG === 'true',\n//                 ...options\n//             }\n//         );\n//     }\n//\n//     return isGAEnabled;\n// };\n\n\n_c = RouteTracker;\n\nconst init = (options = {}) => {\n  ReactGA.initialize(trackingID, {\n    debug: true,\n    ...options\n  });\n};\n\nexport default {\n  GoogleAnalytics,\n  RouteTracker,\n  init\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"RouteTracker\");","map":{"version":3,"sources":["/Users/igor_zhuk_2001/Downloads/bigcareerfest2021/client/src/components/tools/google/analytics/Wrapper.js"],"names":["React","Route","PropTypes","ReactGA","trackingID","GoogleAnalytics","Component","onChangePage","pathname","search","pageUrl","location","window","set","page","origin","props","options","pageview","componentDidMount","componentDidUpdate","prevLocation","isDifferentPathname","isDifferentSearch","render","propTypes","shape","string","isRequired","object","RouteTracker","init","initialize","debug"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,KAAT,QAAsB,kBAAtB;AAEA,OAAOC,SAAP,MAAsB,YAAtB;AAEA;;AACA,OAAO,KAAKC,OAAZ,MAAyB,UAAzB;AAEA,SACIC,UADJ,QAEO,4CAFP;;;AAIA,MAAMC,eAAN,SAA8BL,KAAK,CAACM,SAApC,CAA8C;AAAA;AAAA;;AAAA,SAkB1CC,YAlB0C,GAkB3B,CAACC,QAAD,EAAWC,MAAM,GAAG,EAApB,KAA2B;AACtC,YAAMC,OAAO,GAAGF,QAAQ,GAAGC,MAA3B;AACA;;AACA,YAAM;AAAEE,QAAAA;AAAF,UAAeC,MAArB;AACA;;AACAT,MAAAA,OAAO,CAACU,GAAR,CAAY;AACRC,QAAAA,IAAI,EAAEJ,OADE;AAERC,QAAAA,QAAQ,EAAG,GAAEA,QAAQ,CAACI,MAAO,GAAEL,OAAQ,EAF/B;AAGR,WAAG,KAAKM,KAAL,CAAWC;AAHN,OAAZ;AAKA;;AACAd,MAAAA,OAAO,CAACe,QAAR,CAAiBR,OAAjB;AACH,KA9ByC;AAAA;;AAC1CS,EAAAA,iBAAiB,GAAI;AACjB,SAAKZ,YAAL,CACI,KAAKS,KAAL,CAAWL,QAAX,CAAoBH,QADxB,EAEI,KAAKQ,KAAL,CAAWL,QAAX,CAAoBF,MAFxB;AAIH;;AAEDW,EAAAA,kBAAkB,CAAE;AAAET,IAAAA,QAAQ,EAAEU;AAAZ,GAAF,EAA8B;AAC5C,UAAM;AAAEV,MAAAA,QAAQ,EAAE;AAAEH,QAAAA,QAAF;AAAYC,QAAAA;AAAZ;AAAZ,QAAqC,KAAKO,KAAhD;AACA;;AACA,UAAMM,mBAAmB,GAAGd,QAAQ,KAAKa,YAAY,CAACb,QAAtD;AACA,UAAMe,iBAAiB,GAAGd,MAAM,KAAKY,YAAY,CAACZ,MAAlD;AACA;;AACA,QAAIa,mBAAmB,IAAIC,iBAA3B,EACI,KAAKhB,YAAL,CAAkBC,QAAlB,EAA4BC,MAA5B;AACP;;AAgBDe,EAAAA,MAAM,GAAI;AACN,WAAO,IAAP;AACH;;AAlCyC;;AAqC9CnB,eAAe,CAACoB,SAAhB,GAA4B;AACxBd,EAAAA,QAAQ,EAAET,SAAS,CAACwB,KAAV,CAAgB;AACtBlB,IAAAA,QAAQ,EAAEN,SAAS,CAACyB,MADE;AAEtBlB,IAAAA,MAAM,EAAEP,SAAS,CAACyB;AAFI,GAAhB,EAGPC,UAJqB;AAKxBX,EAAAA,OAAO,EAAEf,SAAS,CAAC2B;AALK,CAA5B;;AAQA,MAAMC,YAAY,GAAG,mBACjB,QAAC,KAAD;AAAO,EAAA,SAAS,EAAEzB;AAAlB;AAAA;AAAA;AAAA;AAAA,QADJ,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KAjBMyB,Y;;AAmBN,MAAMC,IAAI,GAAG,CAACd,OAAO,GAAG,EAAX,KAAkB;AAC3Bd,EAAAA,OAAO,CAAC6B,UAAR,CAAmB5B,UAAnB,EAA+B;AAC3B6B,IAAAA,KAAK,EAAE,IADoB;AAE3B,OAAGhB;AAFwB,GAA/B;AAIH,CALD;;AAOA,eAAe;AACXZ,EAAAA,eADW;AAEXyB,EAAAA,YAFW;AAGXC,EAAAA;AAHW,CAAf","sourcesContent":["import React from 'react';\n\nimport { Route } from 'react-router-dom';\n\nimport PropTypes from 'prop-types';\n\n/* Import the GA unit and tracking ID */\nimport * as ReactGA from 'react-ga';\n\nimport {\n    trackingID\n} from \"../../../../configs/google/analytics/index\";\n\nclass GoogleAnalytics extends React.Component {\n    componentDidMount () {\n        this.onChangePage(\n            this.props.location.pathname,\n            this.props.location.search\n        )\n    }\n\n    componentDidUpdate ({ location: prevLocation }) {\n        const { location: { pathname, search } } = this.props;\n        /* Extract the booleans, which tell if something was changed */\n        const isDifferentPathname = pathname !== prevLocation.pathname;\n        const isDifferentSearch = search !== prevLocation.search;\n        /* If any changes were tracked in url */\n        if (isDifferentPathname || isDifferentSearch)\n            this.onChangePage(pathname, search)\n    }\n\n    onChangePage = (pathname, search = '') => {\n        const pageUrl = pathname + search;\n        /* Extract location object from window */\n        const { location } = window;\n        /* Set current page for google analytics tracking */\n        ReactGA.set({\n            page: pageUrl,\n            location: `${location.origin}${pageUrl}`,\n            ...this.props.options\n        });\n        /* Mark page as viewed */\n        ReactGA.pageview(pageUrl);\n    };\n\n    render () {\n        return null;\n    }\n}\n\nGoogleAnalytics.propTypes = {\n    location: PropTypes.shape({\n        pathname: PropTypes.string,\n        search: PropTypes.string\n    }).isRequired,\n    options: PropTypes.object\n};\n\nconst RouteTracker = () =>\n    <Route component={GoogleAnalytics} />;\n\n// const init = (options = {}) => {\n//     const env = window._env_ || {};\n//     const isGAEnabled = !!env.REACT_APP_GA_TRACKING_ID;\n//\n//     if (isGAEnabled) {\n//         ReactGA.initialize(\n//             env.REACT_APP_GA_TRACKING_ID, {\n//                 debug: env.REACT_APP_GA_DEBUG === 'true',\n//                 ...options\n//             }\n//         );\n//     }\n//\n//     return isGAEnabled;\n// };\n\nconst init = (options = {}) => {\n    ReactGA.initialize(trackingID, {\n        debug: true,\n        ...options\n    });\n};\n\nexport default {\n    GoogleAnalytics,\n    RouteTracker,\n    init\n}"]},"metadata":{},"sourceType":"module"}