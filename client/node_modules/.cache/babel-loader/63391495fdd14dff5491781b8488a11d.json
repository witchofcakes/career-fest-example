{"ast":null,"code":"import _objectSpread from\"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import{Route}from'react-router-dom';/* Import the GA unit and tracking ID */import*as ReactGA from'react-ga';import{trackingID}from\"../../../../configs/google/analytics/index\";import{jsx as _jsx}from\"react/jsx-runtime\";var GoogleAnalytics=/*#__PURE__*/function(_React$Component){_inherits(GoogleAnalytics,_React$Component);var _super=_createSuper(GoogleAnalytics);function GoogleAnalytics(){var _this;_classCallCheck(this,GoogleAnalytics);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.onChangePage=function(pathname){var search=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';var pageUrl=pathname+search;/* Extract location object from window */var _window=window,location=_window.location;/* Set current page for google analytics tracking */ReactGA.set(_objectSpread({page:pageUrl,location:\"\".concat(location.origin).concat(pageUrl)},_this.props.options));/* Mark page as viewed */ReactGA.pageview(pageUrl);};return _this;}_createClass(GoogleAnalytics,[{key:\"componentDidMount\",value:function componentDidMount(){this.onChangePage(this.props.location.pathname,this.props.location.search);}},{key:\"componentDidUpdate\",value:function componentDidUpdate(_ref){var prevLocation=_ref.location;var _this$props$location=this.props.location,pathname=_this$props$location.pathname,search=_this$props$location.search;/* Extract the booleans, which tell if something was changed */var isDifferentPathname=pathname!==prevLocation.pathname;var isDifferentSearch=search!==prevLocation.search;/* If any changes were tracked in url */if(isDifferentPathname||isDifferentSearch)this.onChangePage(pathname,search);}},{key:\"render\",value:function render(){return null;}}]);return GoogleAnalytics;}(React.Component);var RouteTracker=function RouteTracker(){return/*#__PURE__*/_jsx(Route,{component:GoogleAnalytics});};// const init = (options = {}) => {\n//     const env = window._env_ || {};\n//     const isGAEnabled = !!env.REACT_APP_GA_TRACKING_ID;\n//\n//     if (isGAEnabled) {\n//         ReactGA.initialize(\n//             env.REACT_APP_GA_TRACKING_ID, {\n//                 debug: env.REACT_APP_GA_DEBUG === 'true',\n//                 ...options\n//             }\n//         );\n//     }\n//\n//     return isGAEnabled;\n// };\nvar init=function init(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};ReactGA.initialize(trackingID,_objectSpread({debug:true},options));};export default{GoogleAnalytics:GoogleAnalytics,RouteTracker:RouteTracker,init:init};","map":{"version":3,"sources":["/app/client/src/components/tools/google/analytics/Wrapper.js"],"names":["React","Route","ReactGA","trackingID","GoogleAnalytics","onChangePage","pathname","search","pageUrl","window","location","set","page","origin","props","options","pageview","prevLocation","isDifferentPathname","isDifferentSearch","Component","RouteTracker","init","initialize","debug"],"mappings":"slBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,OAASC,KAAT,KAAsB,kBAAtB,CAIA,wCACA,MAAO,GAAKC,CAAAA,OAAZ,KAAyB,UAAzB,CAEA,OACIC,UADJ,KAEO,4CAFP,C,8CAIMC,CAAAA,e,2WAkBFC,Y,CAAe,SAACC,QAAD,CAA2B,IAAhBC,CAAAA,MAAgB,2DAAP,EAAO,CACtC,GAAMC,CAAAA,OAAO,CAAGF,QAAQ,CAAGC,MAA3B,CACA,yCAFsC,YAGjBE,MAHiB,CAG9BC,QAH8B,SAG9BA,QAH8B,CAItC,oDACAR,OAAO,CAACS,GAAR,gBACIC,IAAI,CAAEJ,OADV,CAEIE,QAAQ,WAAKA,QAAQ,CAACG,MAAd,SAAuBL,OAAvB,CAFZ,EAGO,MAAKM,KAAL,CAAWC,OAHlB,GAKA,yBACAb,OAAO,CAACc,QAAR,CAAiBR,OAAjB,EACH,C,4EA7BD,4BAAqB,CACjB,KAAKH,YAAL,CACI,KAAKS,KAAL,CAAWJ,QAAX,CAAoBJ,QADxB,CAEI,KAAKQ,KAAL,CAAWJ,QAAX,CAAoBH,MAFxB,EAIH,C,kCAED,iCAAgD,IAAhBU,CAAAA,YAAgB,MAA1BP,QAA0B,0BACD,KAAKI,KADJ,CACpCJ,QADoC,CACxBJ,QADwB,sBACxBA,QADwB,CACdC,MADc,sBACdA,MADc,CAE5C,+DACA,GAAMW,CAAAA,mBAAmB,CAAGZ,QAAQ,GAAKW,YAAY,CAACX,QAAtD,CACA,GAAMa,CAAAA,iBAAiB,CAAGZ,MAAM,GAAKU,YAAY,CAACV,MAAlD,CACA,wCACA,GAAIW,mBAAmB,EAAIC,iBAA3B,CACI,KAAKd,YAAL,CAAkBC,QAAlB,CAA4BC,MAA5B,EACP,C,sBAgBD,iBAAU,CACN,MAAO,KAAP,CACH,C,6BAlCyBP,KAAK,CAACoB,S,EA6CpC,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,sBACjB,KAAC,KAAD,EAAO,SAAS,CAAEjB,eAAlB,EADiB,EAArB,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,GAAMkB,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,EAAkB,IAAjBP,CAAAA,OAAiB,2DAAP,EAAO,CAC3Bb,OAAO,CAACqB,UAAR,CAAmBpB,UAAnB,gBACIqB,KAAK,CAAE,IADX,EAEOT,OAFP,GAIH,CALD,CAOA,cAAe,CACXX,eAAe,CAAfA,eADW,CAEXiB,YAAY,CAAZA,YAFW,CAGXC,IAAI,CAAJA,IAHW,CAAf","sourcesContent":["import React from 'react';\n\nimport { Route } from 'react-router-dom';\n\nimport PropTypes from 'prop-types';\n\n/* Import the GA unit and tracking ID */\nimport * as ReactGA from 'react-ga';\n\nimport {\n    trackingID\n} from \"../../../../configs/google/analytics/index\";\n\nclass GoogleAnalytics extends React.Component {\n    componentDidMount () {\n        this.onChangePage(\n            this.props.location.pathname,\n            this.props.location.search\n        )\n    }\n\n    componentDidUpdate ({ location: prevLocation }) {\n        const { location: { pathname, search } } = this.props;\n        /* Extract the booleans, which tell if something was changed */\n        const isDifferentPathname = pathname !== prevLocation.pathname;\n        const isDifferentSearch = search !== prevLocation.search;\n        /* If any changes were tracked in url */\n        if (isDifferentPathname || isDifferentSearch)\n            this.onChangePage(pathname, search)\n    }\n\n    onChangePage = (pathname, search = '') => {\n        const pageUrl = pathname + search;\n        /* Extract location object from window */\n        const { location } = window;\n        /* Set current page for google analytics tracking */\n        ReactGA.set({\n            page: pageUrl,\n            location: `${location.origin}${pageUrl}`,\n            ...this.props.options\n        });\n        /* Mark page as viewed */\n        ReactGA.pageview(pageUrl);\n    };\n\n    render () {\n        return null;\n    }\n}\n\nGoogleAnalytics.propTypes = {\n    location: PropTypes.shape({\n        pathname: PropTypes.string,\n        search: PropTypes.string\n    }).isRequired,\n    options: PropTypes.object\n};\n\nconst RouteTracker = () =>\n    <Route component={GoogleAnalytics} />;\n\n// const init = (options = {}) => {\n//     const env = window._env_ || {};\n//     const isGAEnabled = !!env.REACT_APP_GA_TRACKING_ID;\n//\n//     if (isGAEnabled) {\n//         ReactGA.initialize(\n//             env.REACT_APP_GA_TRACKING_ID, {\n//                 debug: env.REACT_APP_GA_DEBUG === 'true',\n//                 ...options\n//             }\n//         );\n//     }\n//\n//     return isGAEnabled;\n// };\n\nconst init = (options = {}) => {\n    ReactGA.initialize(trackingID, {\n        debug: true,\n        ...options\n    });\n};\n\nexport default {\n    GoogleAnalytics,\n    RouteTracker,\n    init\n}"]},"metadata":{},"sourceType":"module"}